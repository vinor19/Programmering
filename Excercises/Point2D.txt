public class Point2D{
	private dobule x,y;
	private static int originPoints = 0;

	/*
	 * constructor der laver et punkt ud fra et s√¶t koordinater
	 */
	Pooint2D(double x, double y){
		this.x = x;
		this.y = y;
		if (isOrigin())
			originPoints = originPoints + 1;
	}

	/*
	 * Getters
	 */
	//Returnerer x
	public double x(){
		return x;
	}

	//Returnerer y
	public double y(){
		return y;
	}

	/*
	 * Setters
	 */
	public void x(double x){
		this.x = x;
	}

	/*
	 * Setters
	 */
	public void y(double y){
		this.y = y;
	}


	/*
	 * Checker om punktet er origin
	 */
	public boolean isOrigin{
		return((this.x == 0) && (this.y == 0))	
	}

	/*
	 * Rykker punktet med en given vektor
	 */
	public void move(double deltaX, double deltaY){
		if (isOrigin())
			originPoints = originPoints - 1;
		this.x = this.x + deltaX;
		this.y = this.y + deltaY;
		if (isOrigin())
			originPoints = originPoints + 1;
	}

	/*
	 * Returnere distancen mellem punktet og origin
	 */
	public double distanceToOrigin(){
		return Math.sqrt(x*x+y*y);
	}

	/*
	 * Returnere distancen mellem 2 punkter
	 */
	public double distanceTo(Point2D point){
		return (Math.sqrt((this.x - point.x)*(this.x - point.x)+(this.y - point.y)*(this.y - point.y)))
	}

	/*
	 * Returnere hvor mange punkter der ligger i (0,0)
	 */
	public static int howManyOrigins(){
		return originPoints;
	}

	/*
	 * laver en kopi
	 */
	public Points2D copy(){
		return new Points2D(this.x, this.y);
	}

	/*
	 * Checker om et andet object er det samme som en anden
	 */
	public boolean equals(Object other){
		if (this == other)
			return true;
		if ((other == null)||(!(other instanceof Points2D)))
			return false;
		Points2D o = (Points2D)other;
		return ((this.x == o.x) && 
			(this.y == o.y));
	}

	/*
	 * To string overskrevet i format (x, y)
	 */
	public String toString(){
		return "(" + x + "; " + y + ")";
	}

	/*
	 * returnerer en hashcode for dette object
	 */
	public int hashCode{
		return (Double.hashCode(x) + 31 * Double.hashCode(y));
	}
}